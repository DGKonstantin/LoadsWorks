package Codewars;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;

public class SortTheOdd {

    public static void main(String[] args) {
        int[] a = new int[]{ 820, 728, 202, 368, 624, 744, 162, 740, 855, 59, 434, 26, 797, 230, 398, 134, 678, 425, 17, 885, 782, 684, 808, 948, 733, 626, 226, 628, 878, 51, 806, 738, 197, 331, 513, 269, 724, 304, 435, 625, 888, 793, 532, 824, 436, 689, 400, 560, 754, 555, 460, 480, 433, 568, 795, 115, 136, 659, 418, 775, 741, 766, 589, 472, 258, 565, 508, 558, 564, 136, 741, 901, 618, 975, 583, 898, 951, 845, 360, 595, 139, 863, 724, 879, 908, 982, 234, 509, 133, 928, 893, 537, 216, 484, 892, 433, 605, 860, 638, 613, 735, 813, 166, 893, 719, 554, 94, 165, 936, 863, 243, 83, 918, 473, 485, 640, 851, 843, 473, 829, 951, 779, 677, 197, 476, 459, 576, 992, 940, 219, 779, 553, 327, 355, 536, 525, 524, 814, 725, 299, 987, 851, 541, 227, 741, 493, 692, 119, 625, 306, 92, 230, 189, 985, 713, 215, 972, 988, 797, 819, 745, 5, 584, 987, 713, 181, 536, 216, 62, 768, 321, 994, 246, 620, 666, 224, 694, 159, 940, 94, 484, 528, 447, 501, 600, 878, 306, 300, 878, 486, 879, 700, 482, 72, 161, 897, 904, 80, 243, 572, 824, 898, 534, 725, 771, 46, 62, 382, 628, 476, 73, 827, 733, 425, 126, 422, 421, 271, 742, 215, 859, 938, 577, 472, 882, 143, 1, 806, 49, 735, 907, 387, 270, 529, 991, 929, 294, 854, 716, 721, 459, 726, 904, 33, 675, 16, 932, 988, 97, 798, 217, 596, 610, 415, 841, 506, 694, 542, 404, 70, 144, 231, 589, 730, 524, 26, 872, 96, 397, 648, 562, 101, 880, 298, 917, 421, 480, 530, 23, 229, 942, 825, 110, 375, 429, 783, 650, 416, 880, 232, 574, 174, 9, 452, 669, 469, 638, 783, 973, 800, 2, 719, 403, 901, 493, 677, 555, 665, 841, 922, 89, 771, 626, 882, 289, 453, 785, 358, 311, 388, 270, 147, 788, 433, 535, 400, 742, 167, 49, 646, 123, 653, 353, 400, 546, 934, 200, 985, 382, 595, 801, 564, 231, 115, 120, 911, 807, 977, 169, 417, 358, 907, 714, 994, 122, 171, 550, 546, 286, 302, 471, 1, 846, 769, 15, 542, 316, 316, 355, 219, 827, 463, 173, 110, 582, 601, 468, 738, 331, 815, 930, 507, 897, 809, 290, 665, 547, 432, 252, 12, 336, 324, 470, 230, 24, 762, 888, 542, 750, 219, 700, 160, 149, 607, 489, 705, 264, 728, 435, 121, 97, 156, 808, 641, 749, 257, 713, 164, 51, 981, 251, 682, 951, 158, 113, 311, 56, 883, 712, 547, 338, 526, 246, 490, 992, 785, 312, 91, 106, 821, 911, 798, 118, 18, 982, 455, 966, 169, 795, 319, 606, 133, 655, 745, 865, 135, 820, 730, 463, 49, 882, 394, 253, 74, 174, 135, 513, 480, 255, 808, 744, 212, 966, 95, 317, 527, 938, 712, 856, 443, 356, 254, 682, 116, 542, 557, 208, 69, 835, 58, 947, 15, 347, 894, 619, 499, 206, 801, 443, 713, 114, 524, 421, 841, 835, 903, 939, 871, 429, 496, 615, 404, 401, 461, 192, 839, 274, 705, 130, 762, 779, 74, 544, 80, 983, 796, 616, 557, 644, 854, 267, 54, 132, 769, 831, 248, 314, 617, 867, 780, 734, 268, 999, 48, 229, 224, 238, 904, 864, 578, 433, 659, 750, 160, 865, 947, 233, 983, 168, 572, 410, 280, 500, 85, 202, 966, 705, 924, 503, 331, 402, 52, 127, 960, 604, 794, 403, 643, 743, 854, 827, 779, 754, 580, 994, 39, 858, 209, 174, 220, 982, 483, 462, 749, 322, 538, 896, 37, 742, 595, 78, 48, 595, 474, 460, 471, 649, 399, 641, 714, 584, 650, 728, 216, 929, 593, 170, 683, 295, 136, 769, 614, 416, 431, 379, 944, 314, 863, 969, 18, 700, 134, 83, 268, 506, 371, 971, 910, 148, 907, 922, 362, 396, 986, 570, 927, 266, 733, 538, 327, 21, 195, 975, 386, 632, 700, 445, 212, 655, 562, 458, 610, 997, 844, 843, 242, 148, 162, 422, 344, 151, 42, 579, 5, 743, 593, 639, 569, 937, 989, 342, 833, 96, 623, 92, 412, 756, 790, 913, 271, 206, 694, 543, 961, 302, 712, 801, 304, 924, 283, 537, 186, 920, 472, 70, 360, 318, 667, 961, 661, 921, 653, 218, 972, 179, 222, 724, 199, 502, 440, 329, 980, 570, 911, 355, 970, 876, 845, 777, 217, 887, 602, 474, 439, 465, 696, 329, 311, 572, 892, 740, 180, 552, 289, 691, 4, 922, 614, 930, 215, 155, 248, 419, 639, 40, 98, 259, 249, 241, 784, 687, 81, 600, 732, 579, 228, 775, 439, 30, 903, 366, 41, 766, 269, 424, 492, 99, 829, 954, 531, 171, 834, 727, 472, 842, 75, 411, 162, 315, 251, 378, 333, 903, 540, 467, 764, 968, 652, 62, 849, 603, 922, 935, 765, 912, 833, 559, 195, 968, 483, 814, 631, 74, 681, 462, 845, 913, 182, 735, 859, 918, 332, 75, 272, 613, 670, 909, 734, 135, 404, 930, 498, 51, 845, 356, 261, 201, 63, 927, 354, 693, 154, 482, 480, 476, 554, 580, 514, 335, 371, 649, 882, 329, 703, 911, 532, 174, 227, 873, 918, 385, 768, 735, 598, 162, 725, 608, 939, 483, 145, 525, 69, 430, 190, 563, 153, 173, 145, 493, 341, 45, 998, 228, 330, 23, 729, 404, 70, 460, 927, 676, 449, 613, 547, 753, 904, 645, 84, 79, 749, 979, 131, 166, 608, 951, 35, 300, 894, 576, 625, 485, 976, 328, 299, 124, 391, 285, 277, 429, 146, 509, 142, 177, 762, 637, 801, 132, 61, 886, 111, 94, 22, 557, 178, 812, 342, 53, 453, 418, 348, 210, 695, 160, 352, 805, 182, 638, 53, 511, 728, 749, 484, 324, 812, 804, 885, 22, 567, 523, 113, 403, 859, 808, 267, 156, 58, 340, 52, 930, 680, 32, 950, 111, 246, 537, 544, 263, 699, 901, 489, 217, 373, 586, 952, 749, 181, 746, 335, 100, 257, 684, 695, 687, 386, 833, 79, 253, 566, 137, 86};

        Date start = new Date();
        Arrays.toString(sortArray(a));
        Date fin = new Date();
        System.out.println(fin.getTime() - start.getTime());

        start = new Date();
        Arrays.toString(sortArray1(a));
        fin = new Date();
        System.out.println(fin.getTime() - start.getTime());

        start = new Date();
        Arrays.toString(sortArray2(a));
        fin = new Date();
        System.out.println(fin.getTime() - start.getTime());

    }


    public static int[] sortArray(int[] array) {
        ArrayList <Integer> odd = new ArrayList<>();
        int[] even = new int[array.length];
        for (int i = 0; i < array.length; i++){
            if (array[i] % 2 == 0){
                even[i] = array[i];
            }
            else{
                odd.add(array[i]);
                even[i] = -1;
            }
        }
        Collections.sort(odd);
        for (int i = 0; i < array.length; i++){
            if (even[i] != -1){
                array[i] = even[i];
            }
            else{
                array[i] = odd.get(0);
                odd.remove(0);
            }
        }
        return array;
    }

    public static int[] sortArray1(int[] array) {
        for(int i = 0; i < array.length - 1; i++){
            for(int j = i + 1; j < array.length; j++){
                if(array[i] > array[j] && array[i] % 2 == 1 && array[j] % 2 == 1){
                    int aux = array[i];
                    array[i] = array[j];
                    array[j] = aux;
                }
            }
        }
        return array;
    }
    public static int[] sortArray2(final int[] array) {

        // Sort the odd numbers only
        final int[] sortedOdd = Arrays.stream(array).filter(e -> e % 2 == 1).sorted().toArray();

        // Then merge them back into original array
        for (int j = 0, s = 0; j < array.length; j++) {
            if (array[j] % 2 == 1) array[j] = sortedOdd[s++];
        }

        return array;
    }

}
